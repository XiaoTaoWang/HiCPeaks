HICPeaks
========
*hicpeaks* provide a Python CPU-based implementation for BH-FDR and HICCUPS, two peak calling algorithms
for Hi-C data, proposed by Rao et al [1]_.

Installation
============
*hicpeaks* is developed and tested on UNIX-like operating system, and following packages or softwares are
required:

Python requirements:

a) Python (2.7, not compatible with 3.x for now)
b) Multiprocess
c) Numpy
d) Scipy
e) Matplotlib
f) Pandas
g) Statsmodels
h) Scikit-Learn
i) H5py
j) Cooler

Other requirements:

- ucsc-fetchchromsizes

*conda*, an excellent package manager can be used to install all requirements above.

Install Conda
-------------
.. note:: If you have the Anaconda Distribution installed, you already have it.

Download the latest `Linux Miniconda installer for Python 2.7 <https://conda.io/miniconda.html>`_,
then in your terminal window type the following and follow the prompts on the installer screens::

    $ bash Miniconda2-latest-Linux-x86_64.sh

After that, update the environment variables to finish the Conda installation::

    $ source ~/.bashrc

Install Packages through Conda
------------------------------
Conda allows separation of packages into separate repositories, or channels. The main *defaults*
channel has a large amount of common packages including *numpy*, *scipy*, *pandas*, *statsmodels*,
*scikit-learn*, and *h5py* listed above. To install these packages, type and execute the following
command::

    $ conda install numpy scipy matplotlib pandas statsmodels scikit-learn h5py

Other packages: *cooler* and *ucsc-fetchchromsizes* are not available in the *defaults* channel
but included in the *bioconda* channel, and *multiprocess* is included in the *conda-forge* channel.
To make them accessible, you need to add the *bioconda* channel as well as the other channels bioconda
depends on (note that the order is important to guarantee the correct priority)::

    $ conda config --add channels conda-forge
    $ conda config --add channels defaults
    $ conda config --add channels r
    $ conda config --add channels bioconda

Then other requirements can be installed by::

    $ conda install multiprocess cooler ucsc-fetchchromsizes

Install hicpeaks
----------------
Now just download the `source code <https://pypi.org/project/hicpeaks/>`_ from PyPI, extract it and run
the setup.py script::

    $ python setup.py install

*hicpeaks* would be installed successfully if no exception occurs in the above process.


Overview
========
*hicpeaks* comes with 3 scripts: *toCooler*, *pyBHFDR* and *pyHICCUPS*.

- toCooler

  Store TXT/NPZ bin-level Hi-C data into `cooler <https://github.com/mirnylab/cooler>`_ container.

  1. I have included a sample data with *hicpeaks* source code to illustrate how you should prepare your
     data in TXT format. It's quite easy, just remember 3 points: 1. the file name should follow this pattern
     "chrom1_chrom2.txt" (remove prefix from your chromosome labels, i.e. "chr1" should be "1", and "chrX" should
     be "X"); 2. each file should only contain 3 columns, corresponding to "bin1" of "chrom1", "bin2" of "chrom2",
     and "contact frequency" (**don't** perform any normalization processes); 3. all files of the same resolution
     should be placed under a single folder.
  2. NPZ format is another bin-level Hi-C data container which can extremely speed up data loading. *hicpeaks*
     supports NPZ files generated by `runHiC <https://github.com/XiaoTaoWang/HiC_pipeline>`_ and
     `https://github.com/XiaoTaoWang/TADLib`_.

- pyBHFDR

  A CPU-based python implementation for BH-FDR algorithm. Rao et al states in their supplementary material that
  this algorithm is robust enough to obtain all main results of their paper. Compared with HICCUPS, BH-FDR doesn't use
  λ-chunk in multiple hypothesis test, and only considers the background Donut region when calculating the
  expected values. Here, *pyBHFDR* follows the algorithm pipelines of [1]_ faithfully except that it doesn't implement
  the greedy clustering algorithm for original peak pixels.

- pyHICCUPS

  A CPU-based python implementation for HICCUPS algorithm. Besides the donut region, HICCUPS also considers the
  lower-left, vertical and horizontal backgrounds when calculating the expected values. And λ-chunk is used to overcome
  several multiple hypothesis testing challenges for Hi-C data. Finally, while BH-FDR has to limit the detected pixels
  near the diagonal (<2Mb), HICCUPS is able to generalize itself to the whole chromosome in theory. Here, *pyHICCUPS*
  keeps all main concepts of the original algorithm except for these points (I may fix it in the near future):

  1. *pyHICCUPS* excludes vertical and horizontal backgrounds from its calculation.
  2. *pyHICCUPS* doesn't implement additional filtering of peak pixels based on local enrichment thresholds and local
     clusters.
  3. I haven't implemented the function to combine peak annotations at different resolutions.
  4. Due to computation complexity, you should still limit the genomic distance of 2 loci to some degree (5Mb/10Mb).

  Although these differences, peaks returned by *pyHICCUPS* are quite consistent with our visual inspection, and
  generally follow the loop interaction pattern.


QuickStart
==========
This tutorial will guide you through tools of 
To run *pyBHFDR* or *pyHICCUPS*, you should first store your TXT/NPZ data into a cooler file with *toCooler*.

Change to the example data folder
  



Reference
=========
.. [1] Rao SS, Huntley MH, Durand NC et al. A 3D Map of the Human Genome at Kilobase Resolution
      Reveals Principles of Chromatin Looping. Cell, 2014, 159(7):1665-80.
